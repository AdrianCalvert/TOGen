package com.zainlessbrombie.tools.togen;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Iterator;

/**
 * Created by mathis on 29.04.18 12:51.
 */
public class TOValue { // todo enum

    public static java.lang.String listToPath(java.util.List<java.lang.String> path) {
        Iterator<java.lang.String> it = path.iterator();
        java.lang.String ret = "";
        if(it.hasNext())
            ret = ret.concat(it.next());
        while(it.hasNext())
            ret = ret.concat(".").concat(it.next());
        return ret;
    }

    /**
     * Fills the field with the string specified, replacing values as follows:<br/>
     * {counter} injects the generators counter and increments it<br/>
     * {uuid} inserts a random uuid<br/>
     * {random [lower] [upper]} replaces by a random integer in the specified range, upper exclusive. Example: {random 0 10}<br/>
     * {name} inserts the test generators name<br/>
     * {fieldName} inserts the field name<br/>
     * {path} inserts the whole path<br/>
     * {timestamp} inserts the timestamp as returned by System.currentTimeMillis()<br/>
     * {className} inserts the simpleName of the class currently being generated (useful for annotations in generic superclasses)<br/>
     * {generated [type]} not yet available. Will insert a value generated by the (potentially custom) named generator, like "firstname", "firstnameF", "firstnameM", "username", "password" etc<br/>
     */ //todo generators
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface String {
        /**
         * For documentation on this, see the annotation itself
         */
        java.lang.String value();
    }
    
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Random {
        long lower() default 0;
        long upper();
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface RandomDouble {
        double lower() default 0;
        double upper() default 1;
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Boolean {
        boolean value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Byte {
        byte value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Char {
        char value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Short {
        short value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Integer {
        int value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Long {
        long value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Float {
        float value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Double {
        double value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Null { // todo has to work on objects
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Class {
        java.lang.Class<?> value();
    }

    /**
     * Specifies that this constructor should be used for test generation. If a constructor is private, this annotation has to be used for the constructor to be used, or an exception will be raised.
     * NOte that currently, the constructor has to be a zero-parameter constructor
     */
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.CONSTRUCTOR)
    public @interface UseConstructor {
    }

    // todo ignore

    
    

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface StringArr {
        java.lang.String[] value();
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface RandomArr {
        long lower() default 0;
        long upper();
        int arrayLength();
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface RandomDoubleArr {
        double lower() default 0;
        double upper() default 1;
        int arrayLength();
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface BooleanArr {
        boolean[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface ByteArr {
        byte[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface CharArr {
        char[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface ShortArr {
        short[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface IntegerArr {
        int[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface LongArr {
        long[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface FloatArr {
        float[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface DoubleArr {
        double[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface ClassArr {
        java.lang.Class<?>[] value();
    }
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface NullArr {
        int arrayLength();
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Size {
        int value(); //size todo
    }
}
